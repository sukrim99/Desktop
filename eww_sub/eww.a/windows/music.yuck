(defwidget music []
  (eventbox
    :onhoverlost "scripts/toggle-music.sh --close &"
    (box
      :class "music-area"
      :style "
      ${music_open ? '' : 'margin-top: -233px; margin-bottom: 233px;'}
      ${anim_open_music ? 'transition: 200ms cubic-bezier(0.05, 0.7, 0.1, 1);' : 'transition: 150ms cubic-bezier(0.3, 0, 0.8, 0.15);'}
      "
      (overlay
        (box ; Fallback
          :class "music-cover-art"
        )
        (box ; Cover art
          :class "music-cover-art"
          :style "background-image: url('${mcover.image}');"
        )
        (box ;
          :orientation "v"
          :class "music-box"
          :space-evenly false
          (label
            :class "music-title"
            :wrap false
            :text "${music.title == '' ? 'Not playing' : music.title}"
            :style "color: ${mcover.color.colors.color4};"
            :limit-width 35
          )
          (label
            :class "music-artist"
            :wrap true
            :text "${music.artist}"
            :style "color: ${mcover.color.colors.color4};"
          )
          (box
            :halign "fill"
            :class "music-button-box"
            (centerbox
              :halign "center"
              (button
                :class "song-button"
                :style "color: ${mcover.color.colors.color4};"
                :onclick "playerctl previous" ""
              )
              (button
                :class "song-button"
                :style "color: ${mcover.color.colors.color4};"
                :onclick "playerctl play-pause"
                "${music.status != '' ? music.status : ''}"
              )
              (button
                :class "song-button"
                :style "color: ${mcover.color.colors.color4};"
                :onclick "playerctl next || playerctl position `bc <<< \"100 * $(playerctl metadata mpris:length) / 1000000 / 100\"`"
                ""
              )
            )
          )
          (scale
            :valign "end"
            :value {music.position}
            :class "track-scale"
            :onchange "playerctl position `bc <<< \"{} * $(playerctl metadata mpris:length) / 1000000 / 100\"`"
            :style "highlight {background-color: ${mcover.color.colors.color4};}"
          )
        )
        (box
          :class "music-media-source"
          :halign "start"
          :valign "start"
          :orientation "h"
          (label :class "music-source-icon" :text "${mcover.color.source}" :style "color: ${mcover.color.colors.color4};")
        )
      )
    )
  )
)

(defwindow music
  :wm-ignore true
  :stacking "overlay"
  :monitor 0
  :geometry (geometry
    :x "15px"
    :y "53px"
    :width "558px"
    :height "191px"
  :anchor "top left")
  (music)
)
